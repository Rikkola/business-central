embed-server --server-config=standalone.xml

/subsystem=security:remove
/core-service=management/security-realm=ApplicationRealm:remove

/subsystem=elytron/filesystem-realm=KieRealm:add(path=kie-fs-realm-users)
/subsystem=elytron/simple-role-decoder=from-roles-attribute:add(attribute=role)

/subsystem=elytron/security-domain=ApplicationDomain:list-add(name=realms, index=0, value={realm=KieRealm, role-decoder=from-roles-attribute})
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=default-realm, value=KieRealm)
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=permission-mapper, value=default-permission-mapper)

/subsystem=undertow/application-security-domain=other:add(security-domain=ApplicationDomain)

/subsystem=elytron/http-authentication-factory=application-http-authentication:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=KieRealm}]}, {mechanism-name=FORM}])

/subsystem=ejb3/service=remote:remove
/subsystem=ejb3/service=remote:add(connector-ref=http-remoting-connector, thread-pool-name=default)
/subsystem=ejb3/application-security-domain=other:add(security-domain=ApplicationDomain)

/core-service=management/security-realm=KieRealm:add()
/core-service=management/security-realm=KieRealm/server-identity=ssl:add(keystore-relative-to=jboss.server.config.dir, keystore-password=password)

/subsystem=elytron/filesystem-realm=KieRealm:add-identity(identity=admin)
/subsystem=elytron/filesystem-realm=KieRealm:set-password(identity=admin, clear={password="admin"})
/subsystem=elytron/filesystem-realm=KieRealm:add-identity-attribute(identity=admin, name=role, value=["admin", "analyst", "kiemgmt", "rest-all"])

/subsystem=elytron/filesystem-realm=KieRealm:add-identity(identity=krisv)
/subsystem=elytron/filesystem-realm=KieRealm:set-password(identity=krisv, clear={password="krisv"})
/subsystem=elytron/filesystem-realm=KieRealm:add-identity-attribute(identity=krisv, name=role, value=["admin", "analyst"])

/subsystem=elytron/filesystem-realm=KieRealm:add-identity(identity=john)
/subsystem=elytron/filesystem-realm=KieRealm:set-password(identity=john, clear={password="john"})
/subsystem=elytron/filesystem-realm=KieRealm:add-identity-attribute(identity=john, name=role, value=["analyst", "Accounting", "PM"])

/subsystem=elytron/filesystem-realm=KieRealm:add-identity(identity=sales-rep)
/subsystem=elytron/filesystem-realm=KieRealm:set-password(identity=sales-rep, clear={password="sales-rep"})
/subsystem=elytron/filesystem-realm=KieRealm:add-identity-attribute(identity=sales-rep, name=role, value=["analyst", "sales"])

/subsystem=elytron/filesystem-realm=KieRealm:add-identity(identity=katy)
/subsystem=elytron/filesystem-realm=KieRealm:set-password(identity=katy, clear={password="katy"})
/subsystem=elytron/filesystem-realm=KieRealm:add-identity-attribute(identity=katy, name=role, value=["analyst", "IT"])

/subsystem=elytron/filesystem-realm=KieRealm:add-identity(identity=jack)
/subsystem=elytron/filesystem-realm=KieRealm:set-password(identity=jack, clear={password="jack"})
/subsystem=elytron/filesystem-realm=KieRealm:add-identity-attribute(identity=jack, name=role, value=["analyst", "HR"])

if (outcome != success) of /system-property=org.kie.demo:read-resource
	/system-property=org.kie.server.id:add(value="${org.kie.demo:true}")
else
    /system-property=org.kie.demo:write-attribute(name=value,value="${org.kie.demo:true}")
end-if

if (outcome != success) of /system-property=org.kie.example:read-resource
	/system-property=org.kie.example:add(value="${org.kie.example:true}")
else
    /system-property=org.kie.example:write-attribute(name=value,value="${org.kie.example:true}")
end-if

if (outcome != success) of /system-property=org.jbpm.designer.perspective:read-resource
	/system-property=org.jbpm.designer.perspective:add(value="${org.jbpm.designer.perspective:full}")
else
    /system-property=org.jbpm.designer.perspective:write-attribute(name=value,value="${org.jbpm.designer.perspective:full}")
end-if

if (outcome != success) of /system-property=designerdataobjects:read-resource
	/system-property=designerdataobjects:add(value="${designerdataobjects:false}")
else
    /system-property=designerdataobjects:write-attribute(name=value,value="${designerdataobjects:false}")
end-if

if (outcome != success) of /system-property=org.uberfire.nio.git.ssh.host:read-resource
	/system-property=org.uberfire.nio.git.ssh.host:add(value="0.0.0.0")
else
    /system-property=org.uberfire.nio.git.ssh.host:write-attribute(name=value,value="0.0.0.0")
end-if

if (outcome != success) of /system-property=appformer.experimental.features:read-resource
	/system-property=appformer.experimental.features:add(value="true")
else
    /system-property=appformer.experimental.features:write-attribute(name=value,value="true")
end-if

# Make GIT repositories root directory at /opt/jboss/wildfly/mygit.
# if (outcome != success) of /system-property=org.uberfire.nio.git.dir:read-resource
# 	/system-property=org.uberfire.nio.git.dir:add(value="/opt/jboss/wildfly/mygit")
# else
#     /system-property=org.uberfire.nio.git.dir:write-attribute(name=value,value="/opt/jboss/wildfly/mygit")
# end-if

stop-embedded-server